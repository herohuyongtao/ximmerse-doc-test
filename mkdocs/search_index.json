{
    "docs": [
        {
            "location": "/",
            "text": "Ximmerse SDK for Unity3D (v2.0.1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocument Status:\n\n\nRelease\n\n\n\n\n\n\nDocument Issue Number:\n\n\n2.0.1\n\n\n\n\n\n\nIssue Date:\n\n\n2016-04-01\n\n\n\n\n\n\nSecurity Status:\n\n\nPublic\n\n\n\n\n\n\nAuthor:\n\n\nYouSing Huang, Yongtao Hu, Jingwen Dai\n\n\n\n\n\n\n_ _ _\n\n\n\n\n\n\n\n\n\n\n\u00a9 2015 XIMMERSE\nAll rights reserved\n\n\nUNCONTROLLED COPY\n: The master of this document is stored on an electronic database and is \u201cwrite protected\u201d; it may be altered only by authorized persons. While copies may be printed, it is not recommended. Viewing of the master electronically ensures access to the current issue. Any hardcopies taken must be regarded as uncontrolled copies.\n\n\n\n\n\n\n\nUpdate History\n\n- 04/01/2016: SDK v2.0.1 released. Add Native Android SDK.\n- 02/21/2016: SDK v2.0 released. Support Google Cardboard.\n- 01/23/2016: Support Windows 10.\n- 12/30/2015: Native C++ SDK is released.\n- 12/16/2015: Add \"Developing with PC (Windows)\" chapter.\n- 12/01/2015: SDK v1.0 released.\n\n\n1 Release Statement\n\n\n1.1 Foreword\n\n\n\nThis SDK is designed mainly for Unity3D Engine. In future, we will provide support for other developing environments.\n\n\n1.2 Development Overview\n\n\n\n\nPlease check the \nOpen Box Test Video\n to make sure the X-Hawk and X-Cobra work properly. More demos and tools for validating our devices can be found \nhere\n.\n\n\n\n\n\n\nX-Hawk\n + \nX-Cobra\n + \nGear VR\n\n    Please refer to \n8 Developing with Gear VR\n of this Doc for details.\n\n\nX-Hawk\n + \nX-Cobra\n + \nPC\n with Unity\n    Please refer to \n9 Developing with PC (Windows)\n of this Doc for details.\n\n\nX-Hawk\n + \nX-Cobra\n + \nPC\n with Native C++\n    Please refer to \nhere\n for details.\n\n\nX-Cobra / X-Swift\n + \nBluetooth USB Adapter\n + \nPC\n with Unity\n    Please refer to \n6.1.3 InputTest (X-Cobra)\n and \n6.1.4 InputTest (X-Swift)\n of this Doc for details.\n\n\nX-Hawk\n + \nX-Cobra\n + \nGoogle Cardboard\n\n    Please refer to \n7 Developing with Google Cardboard\n for details.\n\n\nX-Cobra / X-Swift\n + \nGoogle Cardboard\n\n    Please refer to \n7.4 Connect Ximmerse Devices via Bluetooth in Android\n for details.\n\n\n\n\n1.3 Test Environment\n\n\n\n\nOperating System (OS): Windows 7/8/10 PC\n\n\nUnity3D Engine: Unity v5.1.3f1 (32-bit)\n\n\n\n\n1.4 Notes\n\n\n\n\nThis SDK does not support Linux or Mac OS X, please develop using Windows (PC).\n\n\nYou can use other versions of Unity3D. However, versions 4.X are not verified or technically supported.\n\n\nIt is recommended to use Versions 5.X due to its support for VR.\n\n\nIn terms of compatibility or script update issues for different versions of Unity3D, it is recommended to use preprocessor macros.\n\n\n\n\n1.5 Technical Support\n\n\n\n\nEmail: \nsupport@ximmerse.com\n\n\n\n\n\n\n2 SDK Setup\n\n\n2.1 Import Resource Package\n\n\n\n\nIn an empty Unity project, click Unity menu \nAssets\n $\\rightarrow$ \nImport Package\n $\\rightarrow$ \nCustom Package...\n\n    \n\n\nIn the file selection dialog, select \nXimmerse SDK 2.0.unitypackage\n.\n    \n\n\nIn \nImporting package\n, click \nImport\n.\n    \n\n\nDone! There will be two folders named \nPlugins\n and \nXimmerse SDK\n under folder \n$(ProjectDir)/Assets\n.\n    \n\n\n\n\n2.2 Setup Ximmerse SDK under VR HMD SDK\n\n\n\n\nNote: We will take \nUnity VR\n as an example. Please make sure that your Unity version supports VR mode, i.e. v5.1.0+.\n\n\n\n\n\n\nClick Unity menu \nFile\n $\\rightarrow$ \nBuild Settings...\n\n    \n\n\nIn \nBuild Settings\n, click \nPlayer Settings...\n.\n    \n\n\nIn \nInspector\n view $\\rightarrow$ \nSettings for PC, Mac & Linux Standalone\n tab $\\rightarrow$ check the \nVirtual Reality Supported\n checkbox.\n    \n\n\nClick Unity menu \nFile\n $\\rightarrow$ \nNew Scene\n, to create a scene.\n    \n\n\nClick Unity menu \nGameObject\n $\\rightarrow$ \nCreate Empty\n to add a object and rename it to \nVRCameraRig\n.\n\n\nDrag \nMain Camera\n under \nVRCameraRig\n to make \nVRCameraRig\n as \nMain Camera\n's parent.\n    \n\n\nReset \nMain Camera\n's transform.\n    \n\n\nSelect \nVRCameraRig\n $\\rightarrow$ click \nAdd Component\n $\\rightarrow$ select \nVRContext\n.\n    \n\n\nConfig \nTracking Space\n to \nVRCameraRig\n and \nCenter Eye Anchor\n to \nMain Camera\n.\n    \n\n\nIn \nProject Browser\n $\\rightarrow$ \nAssets\n $\\rightarrow$ \nXimmerse SDK\n $\\rightarrow$ \nPrefabs\n $\\rightarrow$ \nInput\n $\\rightarrow$ drag the prefabs named \n_CrossInput\n to the \nHierarchy\n view to instantiate it.\n    \n\n\n\n\n2.3 Input Setup for Ximmerse Hardwares\n\n\nAs shown in the following figure, right boxes are for left hand X-Cobra setup and blue boxes for right hand X-Cobra. \nController Formats\n are the format registered to \nCrossInputManager\n and \nMap Settings\n are the mapping setup.\n\n\n\n\n\nElements' names can be modified in \nMap Settings\n. Take left hand X-Cobra as an example by double clicking \nX-Hawk Alpha 0 (Left) (XHawkMapSetting)\n, buttons on the both sides of the left hand X-Cobra can be setup for switching weapons by changing \nButton[1]\n and \nButton[3]\n to \nPrev Weapon\n and \nNext Weapon\n accordingly.\n\n\n\n\n\nIn the script, the code for setup switch weapons is:\n\n\nvoid Update() {\n    if(CrossInputManager.GetButtonDown(\"Left_Prev Weapon\")){\n        // Use Prev Weapon...\n    }else if(CrossInputManager.GetButtonDown(\"Left_Next Weapon\")){\n        // Use Next Weapon...\n    }\n}\n\n\n\n\n2.4 Programming\n\n\n2.4.1 Access Axes and Buttons\n\n\n\n\nImport \nXimmerse.CrossInput\n namespace.\n    \ncpp\n    using Ximmerse.CrossInput;\n\n\n\n\nAccess the \nHorizontal\n axis of left joystick and the \nVertical\n axis of right joystick.\n    \ncpp\n    float left_h  =CrossInputManager.GetAxis(\"Left_Horizontal\");\n    float right_v =CrossInputManager.GetAxis(\"Right_Vertical\");\n\n\nThese information can also be obtained by \nVirtualController\n as follows, which are equivalent to the above functions.\n\n\ncpp\nfloat left_h  =VirtualController.controllers[0].GetAxis(\"Horizontal\");\nfloat right_v =VirtualController.controllers[1].GetAxis(\"Vertical\");\n\n3. Access the \nFire1\n button of left joystick and the \nJump\n button of right joystick.\n```cpp\nif(CrossInputManager.GetButtonDown(\"Left_Fire1\")) {\n    // Let's fire...\n}\n\n\nif(CrossInputManager.GetButtonDown(\"Right_Jump\")){\n    // Let's jump...\n}\n```\n\n\nSimilarly, these information can also be obtained by \nVirtualController\n as follows, which are equivalent to the above functions.\n\n\n```c\nif(VirtualController.controllers[0].GetButtonDown(\"Fire1\")){\n    // Let's fire...\n}\n\n\nif(VirtualController.controllers[1].GetButtonDown(\"Jump\")){\n    // Let's jump...\n}\n```\n\n\n\n\n\n\n2.4.2 Access Position and Rotation\n\n\nTaking the sample script \nHandController.cs\n under folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/Example\n as an example:\n\n\n\n\n\nImport \nXimmerse.CrossInput\n namespace.\n    \ncpp\n    using Ximmerse.CrossInput;\n\n\n\n\nObtain the reference of \nVirtualPose\n by \nCrossInputManager.VirtualPoseReference(poseName)\n.\n    \ncpp\n    m_Pose=CrossInputManager.VirtualPoseReference(poseName);\n\n\nThe properties and fields of \nVirtualPose\n are as follows:\n```cpp\npublic class VirtualPose:SmartPointer{\n    public string name{\n        get;\n        private set;\n    }\n    public bool matchWithInputManager {\n        get;\n        private set;\n    }\n\n\npublic bool active=true;\npublic int id;\n\npublic Vector3 position;\npublic Quaternion rotation;\n\n...\n\n\n\n}\n\n3. Set `position` and `rotation` of `Transform` to be `position` and `rotation` of `VirtualPose` in functions like `MonoBehaviour.FixedUpdate()`.\ncpp\n/// \n\n///\n/// \n\nprotected virtual void FixedUpdate(){\n    //\n    m_HandTrans.position=m_Pose.position;\n    m_HandTrans.rotation=m_Pose.rotation;\n}\n```\n\n\n\n\n\n\n\n\n3 Ximmerse.Core Namespace\n\n\n3.1 Overview\n\n\nThis namespace is used for accessing the APIs of Ximmerse's hardwares. As our beta versions are still in a fast iteration stage, there will be different versions for the supported hardware. Please pay attention to what your DK version is. Though there will be big changes for this namespace, it should be OK to use Ximmerse hardwares with general software as long as the name and address of the equipment are set properly. Note that in most cases, you will not need to access this namespace. In terms of input interfaces, you only need to access \nXimmerse.CrossInput\n. You can also apply Razer's Hydra in developing as \nXimmerse.CrossInput\n is a compatible input solution.\n\n\n3.2 Legacy Interface\n\n\nIn Unity, Ximmerse's joystick (X-COBRA) is abstracted as \nDeviceBase\n. Information related to the Ximmerse's joystick (e.g. axes, buttons, triggers and IMU) is abstracted as \nSensorBase\n.\n\n\nPrefabs should set up automatically in the SDK. Developers only need to set the corresponding config file under folder \nproject_folder/Ximmerse SDK/Resources/Configs/\n in order to setup Ximmerse's X-COBRA after the formal release.\n\n\nDeviceName\n is the device number. Please refer to the \ntxt\n file under the crossponding samples.\n\n\nDeviceAddress\n is the serial port address under Windows, which is the Bluetooth address under Android.\n\n\nFmtJoy\n refers to the character string of the input formatted key. For example, key \n\"Fire1\"\n will be formatted to \n\"Left_ Fire1\"\n in \nCrossInputManager\n (under \nXimmerse.CrossInput\n namespace) when joystick's \nFmtJoy\n is \n\"Left_{0}\"\n.\n\n\n\nRemarks:\n- Config files are located under folders below:\n    - Unity editor: \nproject_folder/Ximmerse SDK/Resources/Configs/\n\n    - Windows release version: \nrelease_folder/release_folder_Data/StreamingAssets/Configs/\n\n    - Android release version: \nAndroid_SD_card_root_folder/Ximmerse Runtime/Configs/\n\n\n3.3 X-Hawk SDK\n\n\nIf only using X-Hawk, it is recommended to use new X-Hawk SDK under path \n${ProjectDir}\\Assets\\Ximmerse SDK\\Scripts\\Core\\X-Hawk SDK\n (wrapper of C++ SDK), within which \nXHawkInput\n is similar to \nSixenseInput\n in Hydra joystick SDK and \nXHawkInputManager\n is the wrapper of \nXHawkInput\n in \nCrossInput\n system.\n\n\n3.4 Misc.\n\n\nPlease refer to \n${ProjectDir}\\Assets\\Ximmerse SDK\\Scenes\\InputTest\n for details of different input scenes.\n\n\n\n\n4 Ximmerse.CrossInput Namespace\n\n\n4.1 Overview\n\n\nCompatible solution for multiple input.\n \nCrossInputManager\n is the access entry point, which is modified from the official sample \nUnityStandardAssets.CrossPlatformInput\n. In order to run \nXimmerse.CrossInput\n successfully, \nGameObject\n with \nCrossInputManager\n component (whose properties source list should also be set up properly) should be added to the game scene.\n\n\n\n\nTip: You can turn off \nCrossInputManager\n's \nuseCrossInput\n before running so that \nCrossInputManager\n will use the embedded input APIs of Unity.\n\n\n\n\nOn the other hand, you can customize other input solutions, such as Razer's Hydra, Xbox 360 controller or Ximmerse's joystick (X-COBRA). Instead of writing different access interfaces for different input solutions, you only need to access the static functions of \nCrossInputManager\n.\n\n\nFor example, assuming you want to acquire the status of the joystick and button (pressed or not), you will need to call \nInput.GetAxis(axisName)\n and \nInput.GetButton(buttonName)\n in native Unity programming. With \nXimmerse.CrossInput\n input system, they can be easily replaced by \nCrossInputManager.GetAxis(axisName)\n and \nCrossInputManager.GetButton(buttonName)\n.\n\n\nCurrent input solutions can be divided into two categories: traditional controllers (keyboard & mouse and joystick) and motion controllers (with position and orientation in space). With \nXimmerse.CrossInput\n, motion sensing input is abstracted as \nVirtualPose\n class (with position and orientation in space). You can obtain the reference of the \nVirtualPose\n by simply calling \nCrossInputManager.VirtualPoseReference(name)\n.\n\n\n\n\nTip: In the \nUnityStandardAssets.CrossPlatformInput\n sample, joystick and button are abstracted as \nVirtualAxis\n and \nVirtualButton\n. Please refer to the \nExtensions\n section on how to extend \nXimmerse.CrossInput\n.\n\n\n\n\nIn this SDK, the full preset hierarchy is as follows. To disable one particular input component, simply set \nGameObject\n's \nactive\n to \nfalse\n on the respective script.\n\n\n\n \n\n\n\n\n4.2 Selected Classes Introduction\n\n\n4.2.1 CrossInputManager\n\n\nInput manager, similar to \nUnityStandardAssets.CrossPlatformInput\n.\n\nThe related input APIs of \nCrossPlatformInputManager\n are as follows:\n\n\n\n\n\n\n\n\nReturn Type\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\nAxisExists(String)\n\n\nreturn true while the virtual axis identified by given string exists\n\n\n\n\n\n\nBoolean\n\n\nButtonExists(String)\n\n\nreturn true while the virtual button identified by given string exists\n\n\n\n\n\n\nSingle\n\n\nGetAxis(String)\n\n\nreturn the value of the virtual axis identified by given string\n\n\n\n\n\n\nSingle\n\n\nGetAxisRaw(String)\n\n\nreturn the value of the virtual axis identified by given string with no smoothing filtering applied\n\n\n\n\n\n\nBoolean\n\n\nGetButton(String)\n\n\nreturn true while the virtual button identified by given string is held down\n\n\n\n\n\n\nBoolean\n\n\nGetButtonDown(String)\n\n\nreturn true during the frame the user pressed down the virtual button identified by given string\n\n\n\n\n\n\nBoolean\n\n\nGetButtonUp(String)\n\n\nreturn true the first frame the user releases the virtual button identified by given string\n\n\n\n\n\n\nBoolean\n\n\nPoseExists(String)\n\n\nreturn true while the virtual pose identified by given string exists\n\n\n\n\n\n\nVector3\n\n\nGetPosePosition(String)\n\n\nreturn the value of the position in the space identified by given string\n\n\n\n\n\n\nQuaternion\n\n\nGetPoseRotation(String)\n\n\nreturn the value of the rotation in the space identified by given string\n\n\n\n\n\n\nVoid\n\n\nRegisterVirtualAxis(VirtualAxis)\n\n\nregister one virtual axis to CrossInputManager\n\n\n\n\n\n\nVoid\n\n\nRegisterVirtualButton(VirtualButton)\n\n\nregister one virtual button to CrossInputManager\n\n\n\n\n\n\nVoid\n\n\nRegisterVirtualPose(VirtualPose)\n\n\nregister one virtual pose to CrossInputManager\n\n\n\n\n\n\nVoid\n\n\nSetAxis(String,Single)\n\n\nset the value of the axis identified by given string\n\n\n\n\n\n\nVoid\n\n\nSetAxisNegative(String)\n\n\nset the value of the axis identified by given string to -1\n\n\n\n\n\n\nVoid\n\n\nSetAxisPositive(String)\n\n\nset the value of the axis identified by given string to 1\n\n\n\n\n\n\nVoid\n\n\nSetAxisZero(String)\n\n\nset the value of the axis identified by given string to 0\n\n\n\n\n\n\nVoid\n\n\nSetButtonDown(String)\n\n\nset the virtual button identified by given string to be held down\n\n\n\n\n\n\nVoid\n\n\nSetButtonUp(String)\n\n\nset the virtual button identified by given string to be released\n\n\n\n\n\n\nVoid\n\n\nSetPose(String,Vector3,Quaternion)\n\n\nset the value of the pose identified by given string\n\n\n\n\n\n\nVoid\n\n\nSetPosePosition(String,Vector3)\n\n\nset the value of the position identified by given string\n\n\n\n\n\n\nVoid\n\n\nSetPoseRotation(String,Quaternion)\n\n\nset the value of the rotation identified by given string\n\n\n\n\n\n\nVoid\n\n\nSetVirtualMousePositionX(Single)\n\n\nset the value of x-axis of the virtual mouse\n\n\n\n\n\n\nVoid\n\n\nSetVirtualMousePositionY(Single)\n\n\nset the value of y-axis of the virtual mouse\n\n\n\n\n\n\nVoid\n\n\nSetVirtualMousePositionZ(Single)\n\n\nset the value of z-axis of the virtual mouse\n\n\n\n\n\n\nVoid\n\n\nUnRegisterVirtualAxis(VirtualAxis)\n\n\nun-register one virtual axis\n\n\n\n\n\n\nVoid\n\n\nUnRegisterVirtualButton(VirtualButton)\n\n\nun-register one virtual button\n\n\n\n\n\n\nVoid\n\n\nUnRegisterVirtualPose(VirtualPose)\n\n\nun-register one virtual pose\n\n\n\n\n\n\nVirtualAxis\n\n\nVirtualAxisReference(String)\n\n\nreturn the reference of the virtual axis identified by given string\n\n\n\n\n\n\nVirtualAxis\n\n\nVirtualAxisReference(Object,String,Boolean)\n\n\nreturn the reference of the virtual axis identified by given string\n\n\n\n\n\n\nVirtualButton\n\n\nVirtualButtonReference(String)\n\n\nreturn the reference of the virtual button identified by given string\n\n\n\n\n\n\nVirtualButton\n\n\nVirtualButtonReference(Object,String,Boolean)\n\n\nreturn the reference of the virtual button identified by given string\n\n\n\n\n\n\nVirtualPose\n\n\nVirtualPoseReference(String)\n\n\nreturn the reference of the virtual pose identified by given string\n\n\n\n\n\n\nVirtualPose\n\n\nVirtualPoseReference(Object,String,Boolean)\n\n\nreturn the reference of the virtual pose identified by given string\n\n\n\n\n\n\n\n\nRemarks:\n1. A mouse's axis information can be obtained by \nCrossInputManager.mousePosition\n. Due to poor user experience, it is not recommended to use traditional mouse as VR input.\n2. Alike \nUnityEngine.Input\n, \nCrossInputManager\n's interface can only be accessed in \nMonoBehaviour.Update()\n.\n3. The priority of \nCrossInputManager\n script should be set higher than the normal ones in order to make sure input can be written to \nCrossInputManager\n's cache while being called. This can be set in \nEdit\n$\\rightarrow$\nProject Settings\n$\\rightarrow$\nScript Execution Order\n:\n\n\n\n4.2.2 UnityInput\n\n\nYou can write the embedded input of Unity to \nCrossInputManager\n's input cache. The embedded input of Unity can be further obtained through \nCrossInputManager\n.\n\n\n\n4.2.3 VirtualController\n\n\nInput interface to distinguish left and right hands.\n It's not easy to distinguish left and right hands as strings are used as keys in \nCrossInputManager\n. With the handy accessor \nVirtualController\n, developers can use formatted strings and the string arrays of input keys to instantiate an instance. Input can be accessed by \nVirtualController.GetAxis(axisName)\n and \nVirtualController.GetButton(buttonName)\n. Please refer to the following example:\n\n\nstring[] joystickFmts=new string[2]{\"j0_{0}\",\"j1_{0}\"}; // joystick list\nstring[] axes=new string[2]{\"Horizontal\",\"Vertical\"}; // axes list\nstring[] buttons=new string[4]{\"Fire1\",\"Fire2\",\"Fire3\",\"Jump\"}; // button list\nVirtualController[] joysticks=new VirtualController[2]{new VirtualController(),new VirtualController()}; // VirtualController list\n\n// initialize VirtualController\njoysticks[0].InitInput(joystickFmts[0],axes,joystickFmts[0],buttons, \"\");\njoysticks[1].InitInput(joystickFmts[1],axes,joystickFmts[1],buttons, \"\");\n\n// access input through VirtualController\njoysticks[0].GetAxis(\"Horizontal\"); // use short key \"Horizontal\", actual registered key is \"j0_Horizontal\"\njoysticks[1].GetButtonDown(\"Fire1\"); // use short key \"Fire1\", actual registered key is \"j1_Fire1\"\n\n\n\n\n4.3 Extensions\n\n\nAs mentioned above, different input solutions are abstracted as \nIInputSource\n interfaces in SDK. Thus, developers can customize multiple input solutions of their own.\nThe interface function of \nIInputSource\n is as follows:\n\n\npublic interface IInputSource\n{\n    // Methods\n    int EnterInputFrame();\n    int ExitInput();\n    int ExitInputFrame();\n    int InitInput();\n\n    // Properties\n    bool enabled {get; set;}\n}\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nInitInput()\n\n\ninitialize input source, return 0 if successful\n\n\n\n\n\n\nExitInput()\n\n\nexit input source and release related sources, return 0 if successful\n\n\n\n\n\n\nEnterInputFrame()\n\n\nenter input frame, write corresponding input information to CrossInputManager's input cache, return 0 if successful\n\n\n\n\n\n\nExitInputFrame()\n\n\nexit input frame, return 0 if successful\n\n\n\n\n\n\n\n\nRemarks:\n1. Input cache refers to the list of \nVirtualAxis\n, \nVirtualButton\n and \nVirtualPose\n of \nCrossInputManager\n.\n2. Input frame refers to the time stamp when the program reads the input (\nMonoBehaviour.Update()\n).\n\n\nIn order to run in \nXimmerse.CrossInput\n, it only needs to implement the \nMonoBehaviour\n of \nIInputSource\n's interface and add it to the property source list of \nCrossInputManager\n.\n\n\nSimilarly, Razer's Hydra can also be used due to its compatibility with \nXimmerse.CrossInput\n by adding its SDK \nSixenseUnityPlugin\n to the project and compatible scipt \nSixense Input.cs\n to \nCrossInputManager\n.\n\n\n\n\n\n5 Other Namespaces\n\n\nSome scripts belong to the Utility class. Demos are available for them where you can edit to fit your needs. Some namespaces belong to low level wrapper of the SDK which in general cases, will not be used in project development.\nThere are some other namespaces in this SDK, including:\n- \nXimmerse.Animation\n: for easy implementation of animation solutions, like \nHandAnimator\n.\n- \nXimmerse.IO\n: for IO Stream under Windows and Android and wrapper of IO tools class.\n- \nXimmerse.UI\n: for extension of UGUI and the compatible solution of traditional UI and VR UI.\n\n\n\n\n6 Samples\n\n\n\n\nNote: all samples can be found in folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/\n.\n\n\n\n\n6.1 CrossInputManager GUI\n\n\nThis sample can be found in folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/InputTest\n, which further contains three samples, i.e. \nInputTest (X-Hawk)\n, \nInputTest (X-Cobra)\n and \nInputTest (X-Swift)\n.\n\n\n6.1.1 InputTest (X-Hawk)\n\n\nThis sample demonstrates how to obtain the detailed X-Cobra's information (including position, rotation, axis, trigger and buttons, etc.) through X-Hawk. Please refer to \n2.1 InputTest (X-Hawk)\n (steps 1-3) of \nTools Instructions\n for detailed setup steps.\n\n\n\n\n\n6.1.2 InputTest (X-Hawk SDK)\n\n\nSimilar to \nInputTest (X-Hawk)\n, this sample also demonstrates how to obtain the detailed X-Cobra's information (including position, rotation, axis, trigger and buttons, etc.) through X-Hawk, but shows them in plain text format. Setup steps are same to \n6.1.1 InputTest (X-Hawk)\n.\n\n\n\n\n\n6.1.3 InputTest (X-Cobra)\n\n\nThis sample demonstrates how to obtain the detailed X-Cobra's information (including rotation, axis, trigger and buttons, etc.) through Bluetooth USB adapter plugged in PC. Please refer to \n2.3 InputTest (X-Cobra)\n (steps 1-4) of \nTools Instructions\n for detailed setup steps.\n\n\n\n\n\n6.1.4 InputTest (X-Swift)\n\n\nThis sample demonstrates how to obtain the detailed X-Swift's information (i.e. rotation) through Bluetooth USB adapter plugged in PC. Please refer to \n2.4 InputTest (X-Swift)\n (steps 1-3) of \nTools Instructions\n for detailed setup steps.\n\n\n\n\n\n6.2 HandController\n\n\nThis sample can be found in folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/Examples\n, which demonstrates how to obtain the \nVirtualPose\n and how to control hand stretches using the trigger value.\n\n\n\n\n\n6.3 Cardboard Test\n\n\nThis sample can be found in folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/Examples\n, which demonstrates how to visualize X-Cobra's real-time status for Cardboard development. Setup steps are same to \n6.1.1 InputTest (X-Hawk)\n.\n\n\n\n\n\n6.4 HydraToXimmerse\n\n\nThis sample can be found in folder \n$(ProjectDir)/Assets/Ximmerse SDK/Scenes/Other Examples\n, which demonstrates how to quickly transfer a Razer's Hydra project to \nXimmerse.CrossInput\n. Some modifications exist for the interfaces to be accessed.\n\n\nIf \nSixenseHands\n of \nSixenseInput SDK\n is used in this sample, the hierarchy will be\n\n\n\nIf \nHydraToXimmerse\n of this SDK is used in this sample, the hierarchy will be\n\n\n\n\n\nFirst remove the original \nSixenseInput\n and add the preset object of \nCrossInputManager\n then, check the \nAs Hand Joystick\n checkbox of the compatible \nCrossInput\n's \nSixenseInput\n, \nVirtualController\n thus will create two joystick accessors automatically.\n    \n\n\nRemove \nSixenseHandsController\n script and add the parent transform with \nPoseMover\n for \nHand-Right\n and \nHand-Left\n to achieve no rotation shift of the \nTransform\n controlled by \nPoseMover\n, i.e. no rotation for the \nTransform\n controlled by \nPoseMover\n when the corresponding \nVirtualPose\n has no rotation. Meanwhile, set \nlocalPosition\n of \nHand-Right\n and \nHand-Left\n to \nVector3.zero\n.\n    \n\n    \n\n    \n \n\n    \n\n\nMove the left and right pivots of \nSixenseInput\n that is compatible to \nCrossInput\n to where \nPoseMover\n is.\n    \n\n\nModify \nSixenseHand.cs\n to import \nXimmerse.CrossInput\n namespace.\n    \ncpp\n    // <!-- TODO\n    using Ximmerse.CrossInput;\n    // TODO -->\n\n\nReplace \nSixenseInput.Controller\n in the script by \nVirtualController\n.\n    \ncpp\n    // <!-- TODO\n            //public SixenseInput.Controller m_controller = null;\n            public VirtualController m_controller;\n    // TODO -->\n\n\nObtain \nm_controller\n from \nVirtualController.controllers\n, reference 0 for left hand and 1 for right hand.\n    \ncpp\n    // <!-- TODO\n                    //m_controller = SixenseInput.GetController( m_hand );\n                    m_controller = VirtualController.controllers( (int)m_hand-1 );\n    // TODO -->\n\n\nWhen accessing input interface, replace the original \nSixenseInput\n function with the \nVirtualController\n function of Unity style.\n    \ncpp\n    // <!-- TODO\n                //if ( m_controller.GetButton(SixenseButtons.ONE) ) {\n                if ( m_controller.GetButton(\"ONE\") ) {\n                    // do something\n                }\n    // TODO -->\n\n\nMap trigger value to axes and buttons, i.e. \nVirtualController.GetAxis(triggerName)\n and \nVirtualController.GetButton(triggerName)\n.\n    \ncpp\n    // <!-- TODO\n                //float fTriggerVal = m_controller.Trigger;\n                float fTriggerVal = m_controller.GetAxis(\"TRIGGER\");\n    // TODO -->\n\n\nEnsure that \ntriggerName\n is not a constant. It should be consistent with the crossponding value of \nXimmerse.CrossInput.CrossInputManager\n. It's more convenient to obtain the information of given joystick from multiple ones by replacing the full key of \nCrossInputManager\n with short keys.\n\n\n\n\n\n\n7 Developing with Google Cardboard\n\n\n7.1 SDK Environment Setup\n\n\n\n\nCreate an empty Unity project.\n\n\nImport Cardboard SDK for Unity package \nCardboardSDKForUnity.unitypackage\n (can be downloaded from \nhere\n) and Ximmerse SDK 2.0 \nXimmerse\u00a0SDK\u00a02.0.unitypackage\n to the project.\n    \n\n    \n\n    \n\n\nIn \nFile\n menu $\\rightarrow$ \nBuild Settings...\n $\\rightarrow$ \nPlayer Settings...\n $\\rightarrow$ \nSettings for PC, Mac & Linux Standalone\n $\\rightarrow$ \nOther Settings\n $\\rightarrow$ \nConfiguration\n $\\rightarrow$ \nScripting Define Symbols\n $\\rightarrow$ add compilation flag \nCARDBOARD_SDK\n.\n    \n\n    \n\n    \n\n\nIn Unity project folder \n$(ProjectDir)\n $\\rightarrow$ \nAssets\n $\\rightarrow$ \nPlugins\n $\\rightarrow$ \nAndroid\n $\\rightarrow$ delete file \nAndroidManifest.xml\n $\\rightarrow$ rename file \nAndroidManifest_Cardboard.xml\n to \nAndroidManifest.xml\n.\n\n\n\n\n7.2 Build APK\n\n\nNote: we will take how to build \nCardboardTest.apk\n as an example.\n\n\n\n\nSetup SDK environment as described \nabove\n.\n\n\nDelete the default game object \nMain Camera\n from the scene.\n\n\nMenu \nGameObject\n $\\rightarrow$ \nCreate Empty\n $\\rightarrow$ rename it to \nMain Camera\n.\n\n\nDrag both \nAssets\\Cardboard\\Prefabs\\CardboardMain.prefab\n and \nAssets\\Ximmerse SDK\\Prefabs\\Input\\_CrossInput.prefab\n to the scene.\n    \n\n    \n \n\n    \n\n\nAdd \nVR Context\n component to game object \nCardboardMain\n by selecting \nCardboardMain\n $\\rightarrow$ in \nInspector\n view $\\rightarrow$ click \nAdd Component\n button $\\rightarrow$ search and select \nVR Context\n. Config \nTracking Space\n to \nCardboardMain\n and \nCenter Eye Anchor\n to \nHead\n or \nMain Camera\n.\n    \n\n    \n\n    \n\n\nAdd reset buttons \nLeft_Start\n and \nRight_Start\n to \nVR Context\n.\n    \n\n    \n\n    \n\n\nDrag \npf_x_cobra_00.prefab\n and \npf_x_cobra_01.prefab\n under \nAssets\\Ximmerse SDK\\Prefabs\\Input\n to the scene.\n    \n\n    \n\n    \n\n\n(optional)\n Modify camera components \nMain Camera\n, \nMain Camera Left\n and \nMain Camera Right\n by selecting them (one by one) $\\rightarrow$ in \nInspector\n view $\\rightarrow$ \nCamera\n $\\rightarrow$ \nClear Flags\n $\\rightarrow$ select \nSkybox\n, then set \nClipping Planes\n's \nNear\n to \n0.01\n.\n    \n\n    \n\n    \n\n\n(optional)\n \n_CrossInput\n $\\rightarrow$ \n_XimInput\n $\\rightarrow$ \nX-Hawk\n $\\rightarrow$ in \nInspector\n view $\\rightarrow$ \nX Hawk Input Manager (Script)\n $\\rightarrow$ modify \nSensitivity\n to change the scaling values of lighting blobs, or \nCardboardMain\n $\\rightarrow$ \nHead\n $\\rightarrow$ \nMain Camera\n $\\rightarrow$ \nPivot\n $\\rightarrow$ in \nInspector\n view $\\rightarrow$ modify \nTransform\n to change the space transform of lighting blobs.\n    \n\n    \n \n\n    \n\n\nGenerate APK by clicking menu \nFile\n $\\rightarrow$ \nBuild Settings...\n $\\rightarrow$ \nAndroid\n $\\rightarrow$ check on options \nDevelopment Build\n and \nAutoconnect Profiler\n $\\rightarrow$ \nBuild\n.\n    > Note:\n    > 1. If it asks to search for the Android SDK when building, you will ned to specify the Android SDK root folder in the file dialog:\n    >   \n\n    >   - If you haven't downloaded Android SDK yet, you can download it from \nhere\n, e.g. \ninstaller_r24.4.1-windows.exe\n.\n    >   - If it further complains that the Android SDK is outdated, you will need to manually update it by going into its installed root folder $\\rightarrow$ run \nSDK Manager.exe\n $\\rightarrow$ install a newer version Android SDK Build Tools, e.g. \nv21.1.2\n:\n    >       \n \n \n\n    > 2. If it complains that Bundle Identifier has not been set up correctly, you will need to modify the Bundle Indentifier accordingly, e.g. \ncom.Xim.CardboardTest\n:\n    >   \n \n\n\n\n\n7.3 Run APK\n\n\nThere are two ways to run it:\n1. Run it as default applications. After this, the application will run automatically when plugin Android phone to X-Hawk. Steps:\n    1. \nConnect the X-Hawk's USB Connector port B to the Android phone. Wait until \nChoose an app for the USB device\n dialog pops up. Note that all the available apps that use Ximmerse SDK will be displayed here.\n        \n\n\n    > Tip:\n    > 1. Similar to above, if the X-Hawk in your hand is the latest version with a LED indicator, after this step, it will stop breathing (blinking) and remain lighted.\n    > 2. If the <kbd>Choose an app for the USB device</kbd> dialog does not pop up after a while or another app that you do not want launches automatically,  you will need to clear the cache of the previous apps that use Ximmerse SDK. This can be done in `Settings` $\\rightarrow$ `Device` $\\rightarrow$ `Applications` $\\rightarrow$ `Default applications` $\\rightarrow$ `Clear defaults` $\\rightarrow$ `CLEAR`.\n    >   <div align = center><img src=\"imgs/Clear.png\"></div>\n\n2. Seleck `Toy Brick` and click the `ALWAYS` option to continue. You will be able to see the  demo running on the Android phone.\n    <div align = center><img src=\"imgs/App2.png\"></div>\n    <div align = center><img src=\"imgs/CardboardTest.png\"></div>\n\n\n\n\n\n\n\nAfter APK runs, manually click the \nOK\n button in the dialog.\n\n\n\n\nNote: The first running style can be disabled by removing or commenting out the following code segment of file \n${ProjectDir}\\Assets\\Plugins\\Android\\AndroidManifest_Cardboard.xml\n and merge it to \nAndroidManifest.xml\n file of the project.\n  \n\n\n\n\n\n\n\n\n7.4 Connect Ximmerse Devices via Bluetooth in Android\n\n\nXimmerse Devices including X-Cobra and X-Swift can be connected via Bluetooth in Android.\n\n\nSteps: \n(You can also refer to our \nBluetooth Connect Tutorial Video\n for demonstration)\n\n\n\n\nNote: Make sure to first exit X-Console tool if it is running on PC.\n\n\n\n\n\n\nInstall \nBTconnect.apk\n.\n\n\nTurn on Bluetooth in Android mobile.\n\n\nTurn on X-Cobra and X-Swift that you want to connect.\n\n\nRun Bluetooth Setting. Detailed functions are as follows:\n    \u2460 Path of Bluetooth setting file.\n    \u2461 Save current Bluetooth setting.\n    \u2462 Reload Bluetooth setting.\n    \u2463 Device name.\n    \u2464 Device Bluetooth address.\n    \u2465 Scan and connect devices.\n    \u2466 Quit application.\n    \n\n    \n\n    \n\n\nClick \nSave\n button to save current Bluetooth setting after setting properly, then click \nQuit\n to exit the application.\n\n\nDone. Now you should be able to connect and use the corresponding Bluetooth devices in the deployed APKs.\n\n\n\n\n\n\n8 Developing with Gear VR\n\n\n8.1 Hardware Requirement\n\n\n\n\nXimmerse X-Hawk\n\n\nXimmerse X-Cobra\n\n\nXimmerse X-Hawk USB Connector\n\n\nGear VR Innovator Edition for S6\n\n\nSamsung Galaxy S6\n\n\n\n\n\n\n\n\n\n\n\n\n8.2 Steps\n\n\nWe will take \nToy Brick Cardboard APK\n as an example.\n\n\n\n\nTip: You can refer to our \nGear VR Tutorial Video\n for demonstration.\n\n\n\n\n\n\nInstall \nToy Brick Cardboard APK\n on Galaxy S6.\n\n\n\n\nTurn on developer mode on Galaxy S6. This can be done in \nSettings\n $\\rightarrow$ \nDevice\n $\\rightarrow$ \nApplications\n $\\rightarrow$ \nApplication manager\n $\\rightarrow$ \nGear AR Service\n $\\rightarrow$ \nStorage\n $\\rightarrow$ \nMANAGE STORAGE\n $\\rightarrow$ \nDeveloper\n $\\rightarrow$ \nDeveloper mode\n$\\rightarrow$ \nON\n.\n    >Tip: If you do not see the \nDeveloper mode\n option in \nGear AR Service\n, tap \nVR Server Version\n at least 6 times. By re-entering the dialog, you will be able to see it.\n\n\n\n2. Connect the X-Hawk's USB Connector (the white USB cable) port C to a power bank (make sure power bank is on).\n3. Connect the X-Hawk's USB Connector port A to the X-Hawk.\n\n\n\n\nTip: If the X-Hawk in your hand is the latest version with a LED indicator, after this step, the LED indicator will first breath (blink) in a lower pace. Wait until it goes into the faster-pace breathing state before going to the next step.\n4. Set application running modes. Please refer to \n7.3 Run APK\n for details.\n6. Unplug X-Hawk's USB Connector port B from the Galaxy S6 and connect it to the micro USB port of the Gear VR.\n7. Clear all apps running in background of Galaxy 6 and insert it into Gear VR.\n8. \nConnect X-Cobra to X-Hawk. This can be done by:\n1. Turn on X-Cobra by press its power button.\n2. Put X-Cobra close to X-Hawk. It will be successfully connected once it vibrates. It's recommended to first connect the left hand X-Cobra, then the right one.\nTip: button combinations of X-Cobra:\n  - Enter calibration mode: hold button [1], [2] and [3] simultaneously for 2 seconds.\n  - \nSwitch/Reset left/right X-Cobras:\n      1. Hold power button for 3 seconds to turn off.\n      2. Hold button [4] and press power button to turn on.\n9. Toy Brick will now launch automatically, or manully press \nOK\n button if choosing the second running mode in Step-5.\n\n\n\n\n\n\n\n\n\n\nTip: If you want to switch to other apps, you will also need to clear the cache of previous apps that used Ximmerse SDK as mentioned previously.\n\n\n\n\n8.3 Notes\n\n\nTo develop for Gear VR:\n- Developers will need to register for an OSIG which is a code that is device specific. Then, the OSIG code is inserted into the APK file so that the specific mobile phone can run the APK. If the OSIG code is not in the APK file, the app will NOT be able to run on your mobile phone.\n    > You can find the OSIG generator and full guide here: https://developer.oculus.com/osig/.\n- Another option to get your app available to the public is to have it approved by the Samsung/Oculus Store.\n\n\n\n\n9 Developing with PC (Windows)\n\n\n9.1 Hardware Requirement\n\n\n\n\nXimmerse X-Hawk\n    \n\n    \n\n    \n\n\nXimmerse X-Cobra\n    \n\n    \n\n    \n\n\nPower Cable\n    \n\n    \n\n    \n\n\n\n\n9.2 Steps\n\n\n\n\nConnect USB port of Power Cable to PC.\n\n\n\n\nConnect Micro port of Power Cable to X-Hawk.\n    > Tip:\n    > 1. If the X-Hawk in your hand is the latest version with a LED indicator, after this step, the LED indicator will first breath (blink). Wait until it stops breathing (blinking) and remain lighted before going to the next step.\n    > 2. By now, X-Hawk should be connected with PC (Windows) successfully. During the process, no extra driver is needed, which will be automatically installed by Windows after plugging it to PC.\n    > This can be verified via right click \nComputer\n $\\rightarrow$ \nManage\n $\\rightarrow$ \nDevice Manager\n $\\rightarrow$ \nHuman Interface Devices\n, extra HID-compliant device and USB input device will be added.\n    > \n\n\n\n\n\n\nReplace X-Hawk's mount by Oculus DK2's (Windows version) and install it to Oculus DK2.\n\n\n\n\nConnect X-Cobra to X-Hawk. Please refer to \nhere\n for detailed steps.\n\n\n\n\nUnreal Engine 4 Development\n    To develop with X-Hawk in Unreal Engine 4, you only need to download Hydra Plugin for Unreal Engine 4 from \nhere\n and replace the \nsixense.dll\n by our modified \nsixense.dll\n.\n\n\nAll the Sixense SDK interfaces are the same as Hydra joystick except the following aspects:\n1. The 3D position of the controller is respected to the coordinate system of HMD (Helmet Mounted Display), not the world system.\n2. The pose and rotation of the controller is respected to the world coordinate system, not the base station.\n3. The number of buttons of X-Cobra is less than Hydra joystick. Default mappings are:\n\n\n| X-Cobra | Hydra Joystick |\n|--------|--------|\n|   Button [1]    |   Button [ONE]     |\n|   Button [2]    |   Button [START]   |\n|   Button [3]    |   Button [TWO]     |\n|   Button [4]    |   Button [THREE]   |\n\n> Tip: You can re-map buttons by via `sixenseSetButtonRemap()` function of our modified `sixense.dll`, whose description is as follows:\n> ```cpp\n> /* buttons is a 7-int array. It is the button references of X-Cobra that\n>    correspond to Hydra's joystick buttons. If the value of given button\n>    is -1, it means not using X-Cobra button mapping for this button */\n> int sixenseSetButtonRemap(int* buttons);\n> ```\n\n\n\nThe purpose of using our modified \nsixense.dll\n is to access X-Hawk via Sixense SDK interfaces, not to make it fully compatible with Hydra joystick. Please follow the above differences to modify Hydra's SDK.\n\n\n\n\n\n\n\n\n10 Misc.\n\n\nAll required files can be downloaded from our \nSDK github page\n, including\n1. SDK Unity package: \nUnity $\\rightarrow$ Ximmerse SDK 2.0.1.unitypackage\n.\n4. Native C++ SDK: \nNative C++\n. Details can be found \nhere\n.\n3. Native Android SDK: including\n    - \nNative Android $\\rightarrow$ Ximmerse\u00a0Android SDK 1.0.zip\n: Ximmerse Native Android SDK file.\n    - \nNative Android $\\rightarrow$ X-Hawk Info.zip\n: An example project to use Ximmerse Native Android SDK to check the status of X-Hawk.\n2. \nTools: including (more info can be found \nhere\n)\n    - PC Tools\n        - \nTools $\\rightarrow$ PC $\\rightarrow$ Tracking_hid.zip\n\n        - \nTools $\\rightarrow$ PC $\\rightarrow$ CrossInputManager.zip\n\n        - \nTools $\\rightarrow$ PC $\\rightarrow$ X-Console.zip\n\n        - \nTools $\\rightarrow$ PC $\\rightarrow$ IMU_cal_tool_V1.zip\n\n    - Mobile Tools\n        - \nTools $\\rightarrow$ Mobile $\\rightarrow$ BTconnect.apk\n\n        - \nTools $\\rightarrow$ Mobile $\\rightarrow$ CrossInputManager.apk\n\n        - \nTools $\\rightarrow$ Mobile $\\rightarrow$ CardboardTest.apk\n\n3. Demos: including (more info can be found \nhere\n)\n    - \nDemos $\\rightarrow$ Toy Brick Cardboard.apk\n\n    - \nDemos $\\rightarrow$ Toy Brick GearVR.apk\n\n    - \nDemos $\\rightarrow$ Toy Brick (DK2).zip\n\n3. Driver of Bluetooth USB Adapter: \nDriver $\\rightarrow$ CSR8510 Bluetooth USB Adapter.zip\n.\n4. Binary files: \nBinary $\\rightarrow$ sixense.zip\n.",
            "title": "Home"
        },
        {
            "location": "/#1-release-statement",
            "text": "",
            "title": "1 Release Statement"
        },
        {
            "location": "/#11-foreword",
            "text": "This SDK is designed mainly for Unity3D Engine. In future, we will provide support for other developing environments.",
            "title": "1.1 Foreword"
        },
        {
            "location": "/#12-development-overview",
            "text": "Please check the  Open Box Test Video  to make sure the X-Hawk and X-Cobra work properly. More demos and tools for validating our devices can be found  here .    X-Hawk  +  X-Cobra  +  Gear VR \n    Please refer to  8 Developing with Gear VR  of this Doc for details.  X-Hawk  +  X-Cobra  +  PC  with Unity\n    Please refer to  9 Developing with PC (Windows)  of this Doc for details.  X-Hawk  +  X-Cobra  +  PC  with Native C++\n    Please refer to  here  for details.  X-Cobra / X-Swift  +  Bluetooth USB Adapter  +  PC  with Unity\n    Please refer to  6.1.3 InputTest (X-Cobra)  and  6.1.4 InputTest (X-Swift)  of this Doc for details.  X-Hawk  +  X-Cobra  +  Google Cardboard \n    Please refer to  7 Developing with Google Cardboard  for details.  X-Cobra / X-Swift  +  Google Cardboard \n    Please refer to  7.4 Connect Ximmerse Devices via Bluetooth in Android  for details.",
            "title": "1.2 Development Overview"
        },
        {
            "location": "/#13-test-environment",
            "text": "Operating System (OS): Windows 7/8/10 PC  Unity3D Engine: Unity v5.1.3f1 (32-bit)",
            "title": "1.3 Test Environment"
        },
        {
            "location": "/#14-notes",
            "text": "This SDK does not support Linux or Mac OS X, please develop using Windows (PC).  You can use other versions of Unity3D. However, versions 4.X are not verified or technically supported.  It is recommended to use Versions 5.X due to its support for VR.  In terms of compatibility or script update issues for different versions of Unity3D, it is recommended to use preprocessor macros.",
            "title": "1.4 Notes"
        },
        {
            "location": "/#15-technical-support",
            "text": "Email:  support@ximmerse.com",
            "title": "1.5 Technical Support"
        },
        {
            "location": "/#2-sdk-setup",
            "text": "",
            "title": "2 SDK Setup"
        },
        {
            "location": "/#21-import-resource-package",
            "text": "In an empty Unity project, click Unity menu  Assets  $\\rightarrow$  Import Package  $\\rightarrow$  Custom Package... \n      In the file selection dialog, select  Ximmerse SDK 2.0.unitypackage .\n      In  Importing package , click  Import .\n      Done! There will be two folders named  Plugins  and  Ximmerse SDK  under folder  $(ProjectDir)/Assets .",
            "title": "2.1 Import Resource Package"
        },
        {
            "location": "/#22-setup-ximmerse-sdk-under-vr-hmd-sdk",
            "text": "Note: We will take  Unity VR  as an example. Please make sure that your Unity version supports VR mode, i.e. v5.1.0+.    Click Unity menu  File  $\\rightarrow$  Build Settings... \n      In  Build Settings , click  Player Settings... .\n      In  Inspector  view $\\rightarrow$  Settings for PC, Mac & Linux Standalone  tab $\\rightarrow$ check the  Virtual Reality Supported  checkbox.\n      Click Unity menu  File  $\\rightarrow$  New Scene , to create a scene.\n      Click Unity menu  GameObject  $\\rightarrow$  Create Empty  to add a object and rename it to  VRCameraRig .  Drag  Main Camera  under  VRCameraRig  to make  VRCameraRig  as  Main Camera 's parent.\n      Reset  Main Camera 's transform.\n      Select  VRCameraRig  $\\rightarrow$ click  Add Component  $\\rightarrow$ select  VRContext .\n      Config  Tracking Space  to  VRCameraRig  and  Center Eye Anchor  to  Main Camera .\n      In  Project Browser  $\\rightarrow$  Assets  $\\rightarrow$  Ximmerse SDK  $\\rightarrow$  Prefabs  $\\rightarrow$  Input  $\\rightarrow$ drag the prefabs named  _CrossInput  to the  Hierarchy  view to instantiate it.",
            "title": "2.2 Setup Ximmerse SDK under VR HMD SDK"
        },
        {
            "location": "/#23-input-setup-for-ximmerse-hardwares",
            "text": "As shown in the following figure, right boxes are for left hand X-Cobra setup and blue boxes for right hand X-Cobra.  Controller Formats  are the format registered to  CrossInputManager  and  Map Settings  are the mapping setup.   Elements' names can be modified in  Map Settings . Take left hand X-Cobra as an example by double clicking  X-Hawk Alpha 0 (Left) (XHawkMapSetting) , buttons on the both sides of the left hand X-Cobra can be setup for switching weapons by changing  Button[1]  and  Button[3]  to  Prev Weapon  and  Next Weapon  accordingly.   In the script, the code for setup switch weapons is:  void Update() {\n    if(CrossInputManager.GetButtonDown(\"Left_Prev Weapon\")){\n        // Use Prev Weapon...\n    }else if(CrossInputManager.GetButtonDown(\"Left_Next Weapon\")){\n        // Use Next Weapon...\n    }\n}",
            "title": "2.3 Input Setup for Ximmerse Hardwares"
        },
        {
            "location": "/#24-programming",
            "text": "",
            "title": "2.4 Programming"
        },
        {
            "location": "/#241-access-axes-and-buttons",
            "text": "Import  Ximmerse.CrossInput  namespace.\n     cpp\n    using Ximmerse.CrossInput;   Access the  Horizontal  axis of left joystick and the  Vertical  axis of right joystick.\n     cpp\n    float left_h  =CrossInputManager.GetAxis(\"Left_Horizontal\");\n    float right_v =CrossInputManager.GetAxis(\"Right_Vertical\");  These information can also be obtained by  VirtualController  as follows, which are equivalent to the above functions.  cpp\nfloat left_h  =VirtualController.controllers[0].GetAxis(\"Horizontal\");\nfloat right_v =VirtualController.controllers[1].GetAxis(\"Vertical\"); \n3. Access the  Fire1  button of left joystick and the  Jump  button of right joystick.\n```cpp\nif(CrossInputManager.GetButtonDown(\"Left_Fire1\")) {\n    // Let's fire...\n}  if(CrossInputManager.GetButtonDown(\"Right_Jump\")){\n    // Let's jump...\n}\n```  Similarly, these information can also be obtained by  VirtualController  as follows, which are equivalent to the above functions.  ```c\nif(VirtualController.controllers[0].GetButtonDown(\"Fire1\")){\n    // Let's fire...\n}  if(VirtualController.controllers[1].GetButtonDown(\"Jump\")){\n    // Let's jump...\n}\n```",
            "title": "2.4.1 Access Axes and Buttons"
        },
        {
            "location": "/#242-access-position-and-rotation",
            "text": "Taking the sample script  HandController.cs  under folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/Example  as an example:   Import  Ximmerse.CrossInput  namespace.\n     cpp\n    using Ximmerse.CrossInput;   Obtain the reference of  VirtualPose  by  CrossInputManager.VirtualPoseReference(poseName) .\n     cpp\n    m_Pose=CrossInputManager.VirtualPoseReference(poseName);  The properties and fields of  VirtualPose  are as follows:\n```cpp\npublic class VirtualPose:SmartPointer{\n    public string name{\n        get;\n        private set;\n    }\n    public bool matchWithInputManager {\n        get;\n        private set;\n    }  public bool active=true;\npublic int id;\n\npublic Vector3 position;\npublic Quaternion rotation;\n\n...  } 3. Set `position` and `rotation` of `Transform` to be `position` and `rotation` of `VirtualPose` in functions like `MonoBehaviour.FixedUpdate()`. cpp\n///  \n///\n///  \nprotected virtual void FixedUpdate(){\n    //\n    m_HandTrans.position=m_Pose.position;\n    m_HandTrans.rotation=m_Pose.rotation;\n}\n```",
            "title": "2.4.2 Access Position and Rotation"
        },
        {
            "location": "/#3-ximmersecore-namespace",
            "text": "",
            "title": "3 Ximmerse.Core Namespace"
        },
        {
            "location": "/#31-overview",
            "text": "This namespace is used for accessing the APIs of Ximmerse's hardwares. As our beta versions are still in a fast iteration stage, there will be different versions for the supported hardware. Please pay attention to what your DK version is. Though there will be big changes for this namespace, it should be OK to use Ximmerse hardwares with general software as long as the name and address of the equipment are set properly. Note that in most cases, you will not need to access this namespace. In terms of input interfaces, you only need to access  Ximmerse.CrossInput . You can also apply Razer's Hydra in developing as  Ximmerse.CrossInput  is a compatible input solution.",
            "title": "3.1 Overview"
        },
        {
            "location": "/#32-legacy-interface",
            "text": "In Unity, Ximmerse's joystick (X-COBRA) is abstracted as  DeviceBase . Information related to the Ximmerse's joystick (e.g. axes, buttons, triggers and IMU) is abstracted as  SensorBase .  Prefabs should set up automatically in the SDK. Developers only need to set the corresponding config file under folder  project_folder/Ximmerse SDK/Resources/Configs/  in order to setup Ximmerse's X-COBRA after the formal release.  DeviceName  is the device number. Please refer to the  txt  file under the crossponding samples.  DeviceAddress  is the serial port address under Windows, which is the Bluetooth address under Android.  FmtJoy  refers to the character string of the input formatted key. For example, key  \"Fire1\"  will be formatted to  \"Left_ Fire1\"  in  CrossInputManager  (under  Ximmerse.CrossInput  namespace) when joystick's  FmtJoy  is  \"Left_{0}\" .  Remarks:\n- Config files are located under folders below:\n    - Unity editor:  project_folder/Ximmerse SDK/Resources/Configs/ \n    - Windows release version:  release_folder/release_folder_Data/StreamingAssets/Configs/ \n    - Android release version:  Android_SD_card_root_folder/Ximmerse Runtime/Configs/",
            "title": "3.2 Legacy Interface"
        },
        {
            "location": "/#33-x-hawk-sdk",
            "text": "If only using X-Hawk, it is recommended to use new X-Hawk SDK under path  ${ProjectDir}\\Assets\\Ximmerse SDK\\Scripts\\Core\\X-Hawk SDK  (wrapper of C++ SDK), within which  XHawkInput  is similar to  SixenseInput  in Hydra joystick SDK and  XHawkInputManager  is the wrapper of  XHawkInput  in  CrossInput  system.",
            "title": "3.3 X-Hawk SDK"
        },
        {
            "location": "/#34-misc",
            "text": "Please refer to  ${ProjectDir}\\Assets\\Ximmerse SDK\\Scenes\\InputTest  for details of different input scenes.",
            "title": "3.4 Misc."
        },
        {
            "location": "/#4-ximmersecrossinput-namespace",
            "text": "",
            "title": "4 Ximmerse.CrossInput Namespace"
        },
        {
            "location": "/#41-overview",
            "text": "Compatible solution for multiple input.   CrossInputManager  is the access entry point, which is modified from the official sample  UnityStandardAssets.CrossPlatformInput . In order to run  Ximmerse.CrossInput  successfully,  GameObject  with  CrossInputManager  component (whose properties source list should also be set up properly) should be added to the game scene.   Tip: You can turn off  CrossInputManager 's  useCrossInput  before running so that  CrossInputManager  will use the embedded input APIs of Unity.   On the other hand, you can customize other input solutions, such as Razer's Hydra, Xbox 360 controller or Ximmerse's joystick (X-COBRA). Instead of writing different access interfaces for different input solutions, you only need to access the static functions of  CrossInputManager .  For example, assuming you want to acquire the status of the joystick and button (pressed or not), you will need to call  Input.GetAxis(axisName)  and  Input.GetButton(buttonName)  in native Unity programming. With  Ximmerse.CrossInput  input system, they can be easily replaced by  CrossInputManager.GetAxis(axisName)  and  CrossInputManager.GetButton(buttonName) .  Current input solutions can be divided into two categories: traditional controllers (keyboard & mouse and joystick) and motion controllers (with position and orientation in space). With  Ximmerse.CrossInput , motion sensing input is abstracted as  VirtualPose  class (with position and orientation in space). You can obtain the reference of the  VirtualPose  by simply calling  CrossInputManager.VirtualPoseReference(name) .   Tip: In the  UnityStandardAssets.CrossPlatformInput  sample, joystick and button are abstracted as  VirtualAxis  and  VirtualButton . Please refer to the  Extensions  section on how to extend  Ximmerse.CrossInput .   In this SDK, the full preset hierarchy is as follows. To disable one particular input component, simply set  GameObject 's  active  to  false  on the respective script.",
            "title": "4.1 Overview"
        },
        {
            "location": "/#42-selected-classes-introduction",
            "text": "",
            "title": "4.2 Selected Classes Introduction"
        },
        {
            "location": "/#421-crossinputmanager",
            "text": "Input manager, similar to  UnityStandardAssets.CrossPlatformInput . \nThe related input APIs of  CrossPlatformInputManager  are as follows:     Return Type  Function  Description      Boolean  AxisExists(String)  return true while the virtual axis identified by given string exists    Boolean  ButtonExists(String)  return true while the virtual button identified by given string exists    Single  GetAxis(String)  return the value of the virtual axis identified by given string    Single  GetAxisRaw(String)  return the value of the virtual axis identified by given string with no smoothing filtering applied    Boolean  GetButton(String)  return true while the virtual button identified by given string is held down    Boolean  GetButtonDown(String)  return true during the frame the user pressed down the virtual button identified by given string    Boolean  GetButtonUp(String)  return true the first frame the user releases the virtual button identified by given string    Boolean  PoseExists(String)  return true while the virtual pose identified by given string exists    Vector3  GetPosePosition(String)  return the value of the position in the space identified by given string    Quaternion  GetPoseRotation(String)  return the value of the rotation in the space identified by given string    Void  RegisterVirtualAxis(VirtualAxis)  register one virtual axis to CrossInputManager    Void  RegisterVirtualButton(VirtualButton)  register one virtual button to CrossInputManager    Void  RegisterVirtualPose(VirtualPose)  register one virtual pose to CrossInputManager    Void  SetAxis(String,Single)  set the value of the axis identified by given string    Void  SetAxisNegative(String)  set the value of the axis identified by given string to -1    Void  SetAxisPositive(String)  set the value of the axis identified by given string to 1    Void  SetAxisZero(String)  set the value of the axis identified by given string to 0    Void  SetButtonDown(String)  set the virtual button identified by given string to be held down    Void  SetButtonUp(String)  set the virtual button identified by given string to be released    Void  SetPose(String,Vector3,Quaternion)  set the value of the pose identified by given string    Void  SetPosePosition(String,Vector3)  set the value of the position identified by given string    Void  SetPoseRotation(String,Quaternion)  set the value of the rotation identified by given string    Void  SetVirtualMousePositionX(Single)  set the value of x-axis of the virtual mouse    Void  SetVirtualMousePositionY(Single)  set the value of y-axis of the virtual mouse    Void  SetVirtualMousePositionZ(Single)  set the value of z-axis of the virtual mouse    Void  UnRegisterVirtualAxis(VirtualAxis)  un-register one virtual axis    Void  UnRegisterVirtualButton(VirtualButton)  un-register one virtual button    Void  UnRegisterVirtualPose(VirtualPose)  un-register one virtual pose    VirtualAxis  VirtualAxisReference(String)  return the reference of the virtual axis identified by given string    VirtualAxis  VirtualAxisReference(Object,String,Boolean)  return the reference of the virtual axis identified by given string    VirtualButton  VirtualButtonReference(String)  return the reference of the virtual button identified by given string    VirtualButton  VirtualButtonReference(Object,String,Boolean)  return the reference of the virtual button identified by given string    VirtualPose  VirtualPoseReference(String)  return the reference of the virtual pose identified by given string    VirtualPose  VirtualPoseReference(Object,String,Boolean)  return the reference of the virtual pose identified by given string     Remarks:\n1. A mouse's axis information can be obtained by  CrossInputManager.mousePosition . Due to poor user experience, it is not recommended to use traditional mouse as VR input.\n2. Alike  UnityEngine.Input ,  CrossInputManager 's interface can only be accessed in  MonoBehaviour.Update() .\n3. The priority of  CrossInputManager  script should be set higher than the normal ones in order to make sure input can be written to  CrossInputManager 's cache while being called. This can be set in  Edit $\\rightarrow$ Project Settings $\\rightarrow$ Script Execution Order :",
            "title": "4.2.1 CrossInputManager"
        },
        {
            "location": "/#422-unityinput",
            "text": "You can write the embedded input of Unity to  CrossInputManager 's input cache. The embedded input of Unity can be further obtained through  CrossInputManager .",
            "title": "4.2.2 UnityInput"
        },
        {
            "location": "/#423-virtualcontroller",
            "text": "Input interface to distinguish left and right hands.  It's not easy to distinguish left and right hands as strings are used as keys in  CrossInputManager . With the handy accessor  VirtualController , developers can use formatted strings and the string arrays of input keys to instantiate an instance. Input can be accessed by  VirtualController.GetAxis(axisName)  and  VirtualController.GetButton(buttonName) . Please refer to the following example:  string[] joystickFmts=new string[2]{\"j0_{0}\",\"j1_{0}\"}; // joystick list\nstring[] axes=new string[2]{\"Horizontal\",\"Vertical\"}; // axes list\nstring[] buttons=new string[4]{\"Fire1\",\"Fire2\",\"Fire3\",\"Jump\"}; // button list\nVirtualController[] joysticks=new VirtualController[2]{new VirtualController(),new VirtualController()}; // VirtualController list\n\n// initialize VirtualController\njoysticks[0].InitInput(joystickFmts[0],axes,joystickFmts[0],buttons, \"\");\njoysticks[1].InitInput(joystickFmts[1],axes,joystickFmts[1],buttons, \"\");\n\n// access input through VirtualController\njoysticks[0].GetAxis(\"Horizontal\"); // use short key \"Horizontal\", actual registered key is \"j0_Horizontal\"\njoysticks[1].GetButtonDown(\"Fire1\"); // use short key \"Fire1\", actual registered key is \"j1_Fire1\"",
            "title": "4.2.3 VirtualController"
        },
        {
            "location": "/#5-other-namespaces",
            "text": "Some scripts belong to the Utility class. Demos are available for them where you can edit to fit your needs. Some namespaces belong to low level wrapper of the SDK which in general cases, will not be used in project development.\nThere are some other namespaces in this SDK, including:\n-  Ximmerse.Animation : for easy implementation of animation solutions, like  HandAnimator .\n-  Ximmerse.IO : for IO Stream under Windows and Android and wrapper of IO tools class.\n-  Ximmerse.UI : for extension of UGUI and the compatible solution of traditional UI and VR UI.",
            "title": "5 Other Namespaces"
        },
        {
            "location": "/#6-samples",
            "text": "Note: all samples can be found in folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/ .",
            "title": "6 Samples"
        },
        {
            "location": "/#61-crossinputmanager-gui",
            "text": "This sample can be found in folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/InputTest , which further contains three samples, i.e.  InputTest (X-Hawk) ,  InputTest (X-Cobra)  and  InputTest (X-Swift) .",
            "title": "6.1 CrossInputManager GUI"
        },
        {
            "location": "/#612-inputtest-x-hawk-sdk",
            "text": "Similar to  InputTest (X-Hawk) , this sample also demonstrates how to obtain the detailed X-Cobra's information (including position, rotation, axis, trigger and buttons, etc.) through X-Hawk, but shows them in plain text format. Setup steps are same to  6.1.1 InputTest (X-Hawk) .",
            "title": "6.1.2 InputTest (X-Hawk SDK)"
        },
        {
            "location": "/#62-handcontroller",
            "text": "This sample can be found in folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/Examples , which demonstrates how to obtain the  VirtualPose  and how to control hand stretches using the trigger value.",
            "title": "6.2 HandController"
        },
        {
            "location": "/#63-cardboard-test",
            "text": "This sample can be found in folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/Examples , which demonstrates how to visualize X-Cobra's real-time status for Cardboard development. Setup steps are same to  6.1.1 InputTest (X-Hawk) .",
            "title": "6.3 Cardboard Test"
        },
        {
            "location": "/#64-hydratoximmerse",
            "text": "This sample can be found in folder  $(ProjectDir)/Assets/Ximmerse SDK/Scenes/Other Examples , which demonstrates how to quickly transfer a Razer's Hydra project to  Ximmerse.CrossInput . Some modifications exist for the interfaces to be accessed.  If  SixenseHands  of  SixenseInput SDK  is used in this sample, the hierarchy will be  If  HydraToXimmerse  of this SDK is used in this sample, the hierarchy will be   First remove the original  SixenseInput  and add the preset object of  CrossInputManager  then, check the  As Hand Joystick  checkbox of the compatible  CrossInput 's  SixenseInput ,  VirtualController  thus will create two joystick accessors automatically.\n      Remove  SixenseHandsController  script and add the parent transform with  PoseMover  for  Hand-Right  and  Hand-Left  to achieve no rotation shift of the  Transform  controlled by  PoseMover , i.e. no rotation for the  Transform  controlled by  PoseMover  when the corresponding  VirtualPose  has no rotation. Meanwhile, set  localPosition  of  Hand-Right  and  Hand-Left  to  Vector3.zero .\n     \n     \n       \n      Move the left and right pivots of  SixenseInput  that is compatible to  CrossInput  to where  PoseMover  is.\n      Modify  SixenseHand.cs  to import  Ximmerse.CrossInput  namespace.\n     cpp\n    // <!-- TODO\n    using Ximmerse.CrossInput;\n    // TODO -->  Replace  SixenseInput.Controller  in the script by  VirtualController .\n     cpp\n    // <!-- TODO\n            //public SixenseInput.Controller m_controller = null;\n            public VirtualController m_controller;\n    // TODO -->  Obtain  m_controller  from  VirtualController.controllers , reference 0 for left hand and 1 for right hand.\n     cpp\n    // <!-- TODO\n                    //m_controller = SixenseInput.GetController( m_hand );\n                    m_controller = VirtualController.controllers( (int)m_hand-1 );\n    // TODO -->  When accessing input interface, replace the original  SixenseInput  function with the  VirtualController  function of Unity style.\n     cpp\n    // <!-- TODO\n                //if ( m_controller.GetButton(SixenseButtons.ONE) ) {\n                if ( m_controller.GetButton(\"ONE\") ) {\n                    // do something\n                }\n    // TODO -->  Map trigger value to axes and buttons, i.e.  VirtualController.GetAxis(triggerName)  and  VirtualController.GetButton(triggerName) .\n     cpp\n    // <!-- TODO\n                //float fTriggerVal = m_controller.Trigger;\n                float fTriggerVal = m_controller.GetAxis(\"TRIGGER\");\n    // TODO -->  Ensure that  triggerName  is not a constant. It should be consistent with the crossponding value of  Ximmerse.CrossInput.CrossInputManager . It's more convenient to obtain the information of given joystick from multiple ones by replacing the full key of  CrossInputManager  with short keys.",
            "title": "6.4 HydraToXimmerse"
        },
        {
            "location": "/#72-build-apk",
            "text": "Note: we will take how to build  CardboardTest.apk  as an example.   Setup SDK environment as described  above .  Delete the default game object  Main Camera  from the scene.  Menu  GameObject  $\\rightarrow$  Create Empty  $\\rightarrow$ rename it to  Main Camera .  Drag both  Assets\\Cardboard\\Prefabs\\CardboardMain.prefab  and  Assets\\Ximmerse SDK\\Prefabs\\Input\\_CrossInput.prefab  to the scene.\n     \n       \n      Add  VR Context  component to game object  CardboardMain  by selecting  CardboardMain  $\\rightarrow$ in  Inspector  view $\\rightarrow$ click  Add Component  button $\\rightarrow$ search and select  VR Context . Config  Tracking Space  to  CardboardMain  and  Center Eye Anchor  to  Head  or  Main Camera .\n     \n     \n      Add reset buttons  Left_Start  and  Right_Start  to  VR Context .\n     \n     \n      Drag  pf_x_cobra_00.prefab  and  pf_x_cobra_01.prefab  under  Assets\\Ximmerse SDK\\Prefabs\\Input  to the scene.\n     \n     \n      (optional)  Modify camera components  Main Camera ,  Main Camera Left  and  Main Camera Right  by selecting them (one by one) $\\rightarrow$ in  Inspector  view $\\rightarrow$  Camera  $\\rightarrow$  Clear Flags  $\\rightarrow$ select  Skybox , then set  Clipping Planes 's  Near  to  0.01 .\n     \n     \n      (optional)   _CrossInput  $\\rightarrow$  _XimInput  $\\rightarrow$  X-Hawk  $\\rightarrow$ in  Inspector  view $\\rightarrow$  X Hawk Input Manager (Script)  $\\rightarrow$ modify  Sensitivity  to change the scaling values of lighting blobs, or  CardboardMain  $\\rightarrow$  Head  $\\rightarrow$  Main Camera  $\\rightarrow$  Pivot  $\\rightarrow$ in  Inspector  view $\\rightarrow$ modify  Transform  to change the space transform of lighting blobs.\n     \n       \n      Generate APK by clicking menu  File  $\\rightarrow$  Build Settings...  $\\rightarrow$  Android  $\\rightarrow$ check on options  Development Build  and  Autoconnect Profiler  $\\rightarrow$  Build .\n    > Note:\n    > 1. If it asks to search for the Android SDK when building, you will ned to specify the Android SDK root folder in the file dialog:\n    >    \n    >   - If you haven't downloaded Android SDK yet, you can download it from  here , e.g.  installer_r24.4.1-windows.exe .\n    >   - If it further complains that the Android SDK is outdated, you will need to manually update it by going into its installed root folder $\\rightarrow$ run  SDK Manager.exe  $\\rightarrow$ install a newer version Android SDK Build Tools, e.g.  v21.1.2 :\n    >            \n    > 2. If it complains that Bundle Identifier has not been set up correctly, you will need to modify the Bundle Indentifier accordingly, e.g.  com.Xim.CardboardTest :\n    >",
            "title": "7.2 Build APK"
        },
        {
            "location": "/#81-hardware-requirement",
            "text": "Ximmerse X-Hawk  Ximmerse X-Cobra  Ximmerse X-Hawk USB Connector  Gear VR Innovator Edition for S6  Samsung Galaxy S6",
            "title": "8.1 Hardware Requirement"
        },
        {
            "location": "/#82-steps",
            "text": "We will take  Toy Brick Cardboard APK  as an example.   Tip: You can refer to our  Gear VR Tutorial Video  for demonstration.    Install  Toy Brick Cardboard APK  on Galaxy S6.   Turn on developer mode on Galaxy S6. This can be done in  Settings  $\\rightarrow$  Device  $\\rightarrow$  Applications  $\\rightarrow$  Application manager  $\\rightarrow$  Gear AR Service  $\\rightarrow$  Storage  $\\rightarrow$  MANAGE STORAGE  $\\rightarrow$  Developer  $\\rightarrow$  Developer mode $\\rightarrow$  ON .\n    >Tip: If you do not see the  Developer mode  option in  Gear AR Service , tap  VR Server Version  at least 6 times. By re-entering the dialog, you will be able to see it.  \n2. Connect the X-Hawk's USB Connector (the white USB cable) port C to a power bank (make sure power bank is on).\n3. Connect the X-Hawk's USB Connector port A to the X-Hawk.   Tip: If the X-Hawk in your hand is the latest version with a LED indicator, after this step, the LED indicator will first breath (blink) in a lower pace. Wait until it goes into the faster-pace breathing state before going to the next step.\n4. Set application running modes. Please refer to  7.3 Run APK  for details.\n6. Unplug X-Hawk's USB Connector port B from the Galaxy S6 and connect it to the micro USB port of the Gear VR.\n7. Clear all apps running in background of Galaxy 6 and insert it into Gear VR.\n8.  Connect X-Cobra to X-Hawk. This can be done by:\n1. Turn on X-Cobra by press its power button.\n2. Put X-Cobra close to X-Hawk. It will be successfully connected once it vibrates. It's recommended to first connect the left hand X-Cobra, then the right one.\nTip: button combinations of X-Cobra:\n  - Enter calibration mode: hold button [1], [2] and [3] simultaneously for 2 seconds.\n  -  Switch/Reset left/right X-Cobras:\n      1. Hold power button for 3 seconds to turn off.\n      2. Hold button [4] and press power button to turn on.\n9. Toy Brick will now launch automatically, or manully press  OK  button if choosing the second running mode in Step-5.      Tip: If you want to switch to other apps, you will also need to clear the cache of previous apps that used Ximmerse SDK as mentioned previously.",
            "title": "8.2 Steps"
        },
        {
            "location": "/#83-notes",
            "text": "To develop for Gear VR:\n- Developers will need to register for an OSIG which is a code that is device specific. Then, the OSIG code is inserted into the APK file so that the specific mobile phone can run the APK. If the OSIG code is not in the APK file, the app will NOT be able to run on your mobile phone.\n    > You can find the OSIG generator and full guide here: https://developer.oculus.com/osig/.\n- Another option to get your app available to the public is to have it approved by the Samsung/Oculus Store.",
            "title": "8.3 Notes"
        },
        {
            "location": "/#91-hardware-requirement",
            "text": "Ximmerse X-Hawk\n     \n     \n      Ximmerse X-Cobra\n     \n     \n      Power Cable",
            "title": "9.1 Hardware Requirement"
        },
        {
            "location": "/#92-steps",
            "text": "Connect USB port of Power Cable to PC.   Connect Micro port of Power Cable to X-Hawk.\n    > Tip:\n    > 1. If the X-Hawk in your hand is the latest version with a LED indicator, after this step, the LED indicator will first breath (blink). Wait until it stops breathing (blinking) and remain lighted before going to the next step.\n    > 2. By now, X-Hawk should be connected with PC (Windows) successfully. During the process, no extra driver is needed, which will be automatically installed by Windows after plugging it to PC.\n    > This can be verified via right click  Computer  $\\rightarrow$  Manage  $\\rightarrow$  Device Manager  $\\rightarrow$  Human Interface Devices , extra HID-compliant device and USB input device will be added.\n    >     Replace X-Hawk's mount by Oculus DK2's (Windows version) and install it to Oculus DK2.   Connect X-Cobra to X-Hawk. Please refer to  here  for detailed steps.   Unreal Engine 4 Development\n    To develop with X-Hawk in Unreal Engine 4, you only need to download Hydra Plugin for Unreal Engine 4 from  here  and replace the  sixense.dll  by our modified  sixense.dll .  All the Sixense SDK interfaces are the same as Hydra joystick except the following aspects:\n1. The 3D position of the controller is respected to the coordinate system of HMD (Helmet Mounted Display), not the world system.\n2. The pose and rotation of the controller is respected to the world coordinate system, not the base station.\n3. The number of buttons of X-Cobra is less than Hydra joystick. Default mappings are:  | X-Cobra | Hydra Joystick |\n|--------|--------|\n|   Button [1]    |   Button [ONE]     |\n|   Button [2]    |   Button [START]   |\n|   Button [3]    |   Button [TWO]     |\n|   Button [4]    |   Button [THREE]   |\n\n> Tip: You can re-map buttons by via `sixenseSetButtonRemap()` function of our modified `sixense.dll`, whose description is as follows:\n> ```cpp\n> /* buttons is a 7-int array. It is the button references of X-Cobra that\n>    correspond to Hydra's joystick buttons. If the value of given button\n>    is -1, it means not using X-Cobra button mapping for this button */\n> int sixenseSetButtonRemap(int* buttons);\n> ```  The purpose of using our modified  sixense.dll  is to access X-Hawk via Sixense SDK interfaces, not to make it fully compatible with Hydra joystick. Please follow the above differences to modify Hydra's SDK.",
            "title": "9.2 Steps"
        },
        {
            "location": "/#10-misc",
            "text": "All required files can be downloaded from our  SDK github page , including\n1. SDK Unity package:  Unity $\\rightarrow$ Ximmerse SDK 2.0.1.unitypackage .\n4. Native C++ SDK:  Native C++ . Details can be found  here .\n3. Native Android SDK: including\n    -  Native Android $\\rightarrow$ Ximmerse\u00a0Android SDK 1.0.zip : Ximmerse Native Android SDK file.\n    -  Native Android $\\rightarrow$ X-Hawk Info.zip : An example project to use Ximmerse Native Android SDK to check the status of X-Hawk.\n2.  Tools: including (more info can be found  here )\n    - PC Tools\n        -  Tools $\\rightarrow$ PC $\\rightarrow$ Tracking_hid.zip \n        -  Tools $\\rightarrow$ PC $\\rightarrow$ CrossInputManager.zip \n        -  Tools $\\rightarrow$ PC $\\rightarrow$ X-Console.zip \n        -  Tools $\\rightarrow$ PC $\\rightarrow$ IMU_cal_tool_V1.zip \n    - Mobile Tools\n        -  Tools $\\rightarrow$ Mobile $\\rightarrow$ BTconnect.apk \n        -  Tools $\\rightarrow$ Mobile $\\rightarrow$ CrossInputManager.apk \n        -  Tools $\\rightarrow$ Mobile $\\rightarrow$ CardboardTest.apk \n3. Demos: including (more info can be found  here )\n    -  Demos $\\rightarrow$ Toy Brick Cardboard.apk \n    -  Demos $\\rightarrow$ Toy Brick GearVR.apk \n    -  Demos $\\rightarrow$ Toy Brick (DK2).zip \n3. Driver of Bluetooth USB Adapter:  Driver $\\rightarrow$ CSR8510 Bluetooth USB Adapter.zip .\n4. Binary files:  Binary $\\rightarrow$ sixense.zip .",
            "title": "10 Misc."
        },
        {
            "location": "/about/",
            "text": "This is the about page.",
            "title": "About"
        }
    ]
}